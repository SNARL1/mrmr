// Generated by rstantools.  Do not edit by hand.

/*
    mrmr is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    mrmr is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with mrmr.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_twostate_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_twostate");
    reader.add_event(294, 292, "end", "model_twostate");
    return reader;
}
#include <stan_meta_header.hpp>
class model_twostate
  : public stan::model::model_base_crtp<model_twostate> {
private:
        int M;
        int T;
        int maxJ;
        std::vector<int> J;
        int Jtot;
        std::vector<int> prim_idx;
        std::vector<std::vector<std::vector<int> > > Y;
        std::vector<int> introduced;
        std::vector<int> t_intro;
        std::vector<int> removed;
        std::vector<int> t_remove;
        std::vector<std::vector<int> > j_idx;
        std::vector<int> any_surveys;
        int m_detect;
        matrix_d X_detect;
        int m_surv;
        matrix_d X_surv;
        int any_recruitment;
        int Tm1;
public:
    model_twostate(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_twostate(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_twostate_namespace::model_twostate";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "M", "int", context__.to_vec());
            M = int(0);
            vals_i__ = context__.vals_i("M");
            pos__ = 0;
            M = vals_i__[pos__++];
            check_greater_or_equal(function__, "M", M, 1);
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "T", "int", context__.to_vec());
            T = int(0);
            vals_i__ = context__.vals_i("T");
            pos__ = 0;
            T = vals_i__[pos__++];
            check_greater_or_equal(function__, "T", T, 1);
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "maxJ", "int", context__.to_vec());
            maxJ = int(0);
            vals_i__ = context__.vals_i("maxJ");
            pos__ = 0;
            maxJ = vals_i__[pos__++];
            check_greater_or_equal(function__, "maxJ", maxJ, 1);
            current_statement_begin__ = 5;
            validate_non_negative_index("J", "T", T);
            context__.validate_dims("data initialization", "J", "int", context__.to_vec(T));
            J = std::vector<int>(T, int(0));
            vals_i__ = context__.vals_i("J");
            pos__ = 0;
            size_t J_k_0_max__ = T;
            for (size_t k_0__ = 0; k_0__ < J_k_0_max__; ++k_0__) {
                J[k_0__] = vals_i__[pos__++];
            }
            size_t J_i_0_max__ = T;
            for (size_t i_0__ = 0; i_0__ < J_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "J[i_0__]", J[i_0__], 0);
                check_less_or_equal(function__, "J[i_0__]", J[i_0__], maxJ);
            }
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "Jtot", "int", context__.to_vec());
            Jtot = int(0);
            vals_i__ = context__.vals_i("Jtot");
            pos__ = 0;
            Jtot = vals_i__[pos__++];
            check_greater_or_equal(function__, "Jtot", Jtot, 1);
            current_statement_begin__ = 7;
            validate_non_negative_index("prim_idx", "Jtot", Jtot);
            context__.validate_dims("data initialization", "prim_idx", "int", context__.to_vec(Jtot));
            prim_idx = std::vector<int>(Jtot, int(0));
            vals_i__ = context__.vals_i("prim_idx");
            pos__ = 0;
            size_t prim_idx_k_0_max__ = Jtot;
            for (size_t k_0__ = 0; k_0__ < prim_idx_k_0_max__; ++k_0__) {
                prim_idx[k_0__] = vals_i__[pos__++];
            }
            size_t prim_idx_i_0_max__ = Jtot;
            for (size_t i_0__ = 0; i_0__ < prim_idx_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "prim_idx[i_0__]", prim_idx[i_0__], 1);
                check_less_or_equal(function__, "prim_idx[i_0__]", prim_idx[i_0__], T);
            }
            current_statement_begin__ = 11;
            validate_non_negative_index("Y", "M", M);
            validate_non_negative_index("Y", "T", T);
            validate_non_negative_index("Y", "maxJ", maxJ);
            context__.validate_dims("data initialization", "Y", "int", context__.to_vec(M,T,maxJ));
            Y = std::vector<std::vector<std::vector<int> > >(M, std::vector<std::vector<int> >(T, std::vector<int>(maxJ, int(0))));
            vals_i__ = context__.vals_i("Y");
            pos__ = 0;
            size_t Y_k_0_max__ = M;
            size_t Y_k_1_max__ = T;
            size_t Y_k_2_max__ = maxJ;
            for (size_t k_2__ = 0; k_2__ < Y_k_2_max__; ++k_2__) {
                for (size_t k_1__ = 0; k_1__ < Y_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < Y_k_0_max__; ++k_0__) {
                        Y[k_0__][k_1__][k_2__] = vals_i__[pos__++];
                    }
                }
            }
            size_t Y_i_0_max__ = M;
            size_t Y_i_1_max__ = T;
            size_t Y_i_2_max__ = maxJ;
            for (size_t i_0__ = 0; i_0__ < Y_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < Y_i_1_max__; ++i_1__) {
                    for (size_t i_2__ = 0; i_2__ < Y_i_2_max__; ++i_2__) {
                        check_greater_or_equal(function__, "Y[i_0__][i_1__][i_2__]", Y[i_0__][i_1__][i_2__], 0);
                        check_less_or_equal(function__, "Y[i_0__][i_1__][i_2__]", Y[i_0__][i_1__][i_2__], 2);
                    }
                }
            }
            current_statement_begin__ = 12;
            validate_non_negative_index("introduced", "M", M);
            context__.validate_dims("data initialization", "introduced", "int", context__.to_vec(M));
            introduced = std::vector<int>(M, int(0));
            vals_i__ = context__.vals_i("introduced");
            pos__ = 0;
            size_t introduced_k_0_max__ = M;
            for (size_t k_0__ = 0; k_0__ < introduced_k_0_max__; ++k_0__) {
                introduced[k_0__] = vals_i__[pos__++];
            }
            size_t introduced_i_0_max__ = M;
            for (size_t i_0__ = 0; i_0__ < introduced_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "introduced[i_0__]", introduced[i_0__], 0);
                check_less_or_equal(function__, "introduced[i_0__]", introduced[i_0__], 1);
            }
            current_statement_begin__ = 13;
            validate_non_negative_index("t_intro", "M", M);
            context__.validate_dims("data initialization", "t_intro", "int", context__.to_vec(M));
            t_intro = std::vector<int>(M, int(0));
            vals_i__ = context__.vals_i("t_intro");
            pos__ = 0;
            size_t t_intro_k_0_max__ = M;
            for (size_t k_0__ = 0; k_0__ < t_intro_k_0_max__; ++k_0__) {
                t_intro[k_0__] = vals_i__[pos__++];
            }
            size_t t_intro_i_0_max__ = M;
            for (size_t i_0__ = 0; i_0__ < t_intro_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "t_intro[i_0__]", t_intro[i_0__], 0);
                check_less_or_equal(function__, "t_intro[i_0__]", t_intro[i_0__], T);
            }
            current_statement_begin__ = 14;
            validate_non_negative_index("removed", "M", M);
            context__.validate_dims("data initialization", "removed", "int", context__.to_vec(M));
            removed = std::vector<int>(M, int(0));
            vals_i__ = context__.vals_i("removed");
            pos__ = 0;
            size_t removed_k_0_max__ = M;
            for (size_t k_0__ = 0; k_0__ < removed_k_0_max__; ++k_0__) {
                removed[k_0__] = vals_i__[pos__++];
            }
            size_t removed_i_0_max__ = M;
            for (size_t i_0__ = 0; i_0__ < removed_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "removed[i_0__]", removed[i_0__], 0);
                check_less_or_equal(function__, "removed[i_0__]", removed[i_0__], 1);
            }
            current_statement_begin__ = 15;
            validate_non_negative_index("t_remove", "M", M);
            context__.validate_dims("data initialization", "t_remove", "int", context__.to_vec(M));
            t_remove = std::vector<int>(M, int(0));
            vals_i__ = context__.vals_i("t_remove");
            pos__ = 0;
            size_t t_remove_k_0_max__ = M;
            for (size_t k_0__ = 0; k_0__ < t_remove_k_0_max__; ++k_0__) {
                t_remove[k_0__] = vals_i__[pos__++];
            }
            size_t t_remove_i_0_max__ = M;
            for (size_t i_0__ = 0; i_0__ < t_remove_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "t_remove[i_0__]", t_remove[i_0__], 0);
                check_less_or_equal(function__, "t_remove[i_0__]", t_remove[i_0__], T);
            }
            current_statement_begin__ = 18;
            validate_non_negative_index("j_idx", "T", T);
            validate_non_negative_index("j_idx", "maxJ", maxJ);
            context__.validate_dims("data initialization", "j_idx", "int", context__.to_vec(T,maxJ));
            j_idx = std::vector<std::vector<int> >(T, std::vector<int>(maxJ, int(0)));
            vals_i__ = context__.vals_i("j_idx");
            pos__ = 0;
            size_t j_idx_k_0_max__ = T;
            size_t j_idx_k_1_max__ = maxJ;
            for (size_t k_1__ = 0; k_1__ < j_idx_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < j_idx_k_0_max__; ++k_0__) {
                    j_idx[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t j_idx_i_0_max__ = T;
            size_t j_idx_i_1_max__ = maxJ;
            for (size_t i_0__ = 0; i_0__ < j_idx_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < j_idx_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "j_idx[i_0__][i_1__]", j_idx[i_0__][i_1__], 0);
                    check_less_or_equal(function__, "j_idx[i_0__][i_1__]", j_idx[i_0__][i_1__], Jtot);
                }
            }
            current_statement_begin__ = 19;
            validate_non_negative_index("any_surveys", "T", T);
            context__.validate_dims("data initialization", "any_surveys", "int", context__.to_vec(T));
            any_surveys = std::vector<int>(T, int(0));
            vals_i__ = context__.vals_i("any_surveys");
            pos__ = 0;
            size_t any_surveys_k_0_max__ = T;
            for (size_t k_0__ = 0; k_0__ < any_surveys_k_0_max__; ++k_0__) {
                any_surveys[k_0__] = vals_i__[pos__++];
            }
            size_t any_surveys_i_0_max__ = T;
            for (size_t i_0__ = 0; i_0__ < any_surveys_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "any_surveys[i_0__]", any_surveys[i_0__], 0);
                check_less_or_equal(function__, "any_surveys[i_0__]", any_surveys[i_0__], 1);
            }
            current_statement_begin__ = 22;
            context__.validate_dims("data initialization", "m_detect", "int", context__.to_vec());
            m_detect = int(0);
            vals_i__ = context__.vals_i("m_detect");
            pos__ = 0;
            m_detect = vals_i__[pos__++];
            check_greater_or_equal(function__, "m_detect", m_detect, 1);
            current_statement_begin__ = 23;
            validate_non_negative_index("X_detect", "Jtot", Jtot);
            validate_non_negative_index("X_detect", "m_detect", m_detect);
            context__.validate_dims("data initialization", "X_detect", "matrix_d", context__.to_vec(Jtot,m_detect));
            X_detect = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(Jtot, m_detect);
            vals_r__ = context__.vals_r("X_detect");
            pos__ = 0;
            size_t X_detect_j_2_max__ = m_detect;
            size_t X_detect_j_1_max__ = Jtot;
            for (size_t j_2__ = 0; j_2__ < X_detect_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_detect_j_1_max__; ++j_1__) {
                    X_detect(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 24;
            context__.validate_dims("data initialization", "m_surv", "int", context__.to_vec());
            m_surv = int(0);
            vals_i__ = context__.vals_i("m_surv");
            pos__ = 0;
            m_surv = vals_i__[pos__++];
            check_greater_or_equal(function__, "m_surv", m_surv, 1);
            current_statement_begin__ = 25;
            validate_non_negative_index("X_surv", "M", M);
            validate_non_negative_index("X_surv", "m_surv", m_surv);
            context__.validate_dims("data initialization", "X_surv", "matrix_d", context__.to_vec(M,m_surv));
            X_surv = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(M, m_surv);
            vals_r__ = context__.vals_r("X_surv");
            pos__ = 0;
            size_t X_surv_j_2_max__ = m_surv;
            size_t X_surv_j_1_max__ = M;
            for (size_t j_2__ = 0; j_2__ < X_surv_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_surv_j_1_max__; ++j_1__) {
                    X_surv(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 27;
            context__.validate_dims("data initialization", "any_recruitment", "int", context__.to_vec());
            any_recruitment = int(0);
            vals_i__ = context__.vals_i("any_recruitment");
            pos__ = 0;
            any_recruitment = vals_i__[pos__++];
            check_greater_or_equal(function__, "any_recruitment", any_recruitment, 0);
            check_less_or_equal(function__, "any_recruitment", any_recruitment, 1);
            // initialize transformed data variables
            current_statement_begin__ = 31;
            Tm1 = int(0);
            stan::math::fill(Tm1, std::numeric_limits<int>::min());
            stan::math::assign(Tm1,(T - 1));
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 36;
            num_params_r__ += 1;
            current_statement_begin__ = 37;
            num_params_r__ += 1;
            current_statement_begin__ = 38;
            validate_non_negative_index("eps_lambda", "(T - 1)", (T - 1));
            num_params_r__ += (T - 1);
            current_statement_begin__ = 41;
            validate_non_negative_index("beta_phi", "m_surv", m_surv);
            num_params_r__ += m_surv;
            current_statement_begin__ = 42;
            num_params_r__ += 1;
            current_statement_begin__ = 43;
            validate_non_negative_index("eps_phi", "T", T);
            num_params_r__ += T;
            current_statement_begin__ = 46;
            validate_non_negative_index("beta_detect", "m_detect", m_detect);
            num_params_r__ += m_detect;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_twostate() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 36;
        if (!(context__.contains_r("alpha_lambda")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha_lambda missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha_lambda");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "alpha_lambda", "double", context__.to_vec());
        double alpha_lambda(0);
        alpha_lambda = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(alpha_lambda);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha_lambda: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 37;
        if (!(context__.contains_r("sigma_lambda")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_lambda missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_lambda");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_lambda", "double", context__.to_vec());
        double sigma_lambda(0);
        sigma_lambda = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_lambda);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_lambda: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 38;
        if (!(context__.contains_r("eps_lambda")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable eps_lambda missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("eps_lambda");
        pos__ = 0U;
        validate_non_negative_index("eps_lambda", "(T - 1)", (T - 1));
        context__.validate_dims("parameter initialization", "eps_lambda", "vector_d", context__.to_vec((T - 1)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> eps_lambda((T - 1));
        size_t eps_lambda_j_1_max__ = (T - 1);
        for (size_t j_1__ = 0; j_1__ < eps_lambda_j_1_max__; ++j_1__) {
            eps_lambda(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(eps_lambda);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable eps_lambda: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 41;
        if (!(context__.contains_r("beta_phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_phi");
        pos__ = 0U;
        validate_non_negative_index("beta_phi", "m_surv", m_surv);
        context__.validate_dims("parameter initialization", "beta_phi", "vector_d", context__.to_vec(m_surv));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_phi(m_surv);
        size_t beta_phi_j_1_max__ = m_surv;
        for (size_t j_1__ = 0; j_1__ < beta_phi_j_1_max__; ++j_1__) {
            beta_phi(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta_phi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_phi: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 42;
        if (!(context__.contains_r("sigma_phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_phi");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_phi", "double", context__.to_vec());
        double sigma_phi(0);
        sigma_phi = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_phi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_phi: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 43;
        if (!(context__.contains_r("eps_phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable eps_phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("eps_phi");
        pos__ = 0U;
        validate_non_negative_index("eps_phi", "T", T);
        context__.validate_dims("parameter initialization", "eps_phi", "vector_d", context__.to_vec(T));
        Eigen::Matrix<double, Eigen::Dynamic, 1> eps_phi(T);
        size_t eps_phi_j_1_max__ = T;
        for (size_t j_1__ = 0; j_1__ < eps_phi_j_1_max__; ++j_1__) {
            eps_phi(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(eps_phi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable eps_phi: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 46;
        if (!(context__.contains_r("beta_detect")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_detect missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_detect");
        pos__ = 0U;
        validate_non_negative_index("beta_detect", "m_detect", m_detect);
        context__.validate_dims("parameter initialization", "beta_detect", "vector_d", context__.to_vec(m_detect));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_detect(m_detect);
        size_t beta_detect_j_1_max__ = m_detect;
        for (size_t j_1__ = 0; j_1__ < beta_detect_j_1_max__; ++j_1__) {
            beta_detect(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta_detect);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_detect: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 36;
            local_scalar_t__ alpha_lambda;
            (void) alpha_lambda;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha_lambda = in__.scalar_constrain(lp__);
            else
                alpha_lambda = in__.scalar_constrain();
            current_statement_begin__ = 37;
            local_scalar_t__ sigma_lambda;
            (void) sigma_lambda;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_lambda = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_lambda = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 38;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eps_lambda;
            (void) eps_lambda;  // dummy to suppress unused var warning
            if (jacobian__)
                eps_lambda = in__.vector_constrain((T - 1), lp__);
            else
                eps_lambda = in__.vector_constrain((T - 1));
            current_statement_begin__ = 41;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_phi;
            (void) beta_phi;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_phi = in__.vector_constrain(m_surv, lp__);
            else
                beta_phi = in__.vector_constrain(m_surv);
            current_statement_begin__ = 42;
            local_scalar_t__ sigma_phi;
            (void) sigma_phi;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_phi = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_phi = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 43;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eps_phi;
            (void) eps_phi;  // dummy to suppress unused var warning
            if (jacobian__)
                eps_phi = in__.vector_constrain(T, lp__);
            else
                eps_phi = in__.vector_constrain(T);
            current_statement_begin__ = 46;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_detect;
            (void) beta_detect;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_detect = in__.vector_constrain(m_detect, lp__);
            else
                beta_detect = in__.vector_constrain(m_detect);
            // transformed parameters
            current_statement_begin__ = 50;
            validate_non_negative_index("logit_detect", "Jtot", Jtot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> logit_detect(Jtot);
            stan::math::initialize(logit_detect, DUMMY_VAR__);
            stan::math::fill(logit_detect, DUMMY_VAR__);
            current_statement_begin__ = 51;
            validate_non_negative_index("lambda", "Tm1", Tm1);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda(Tm1);
            stan::math::initialize(lambda, DUMMY_VAR__);
            stan::math::fill(lambda, DUMMY_VAR__);
            current_statement_begin__ = 52;
            validate_non_negative_index("log_lik", "M", M);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_lik(M);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 55;
            stan::math::assign(lambda, multiply(any_recruitment, inv_logit(add(alpha_lambda, multiply(eps_lambda, sigma_lambda)))));
            current_statement_begin__ = 58;
            stan::math::assign(logit_detect, multiply(X_detect, beta_detect));
            {
            current_statement_begin__ = 62;
            validate_non_negative_index("acc", "3", 3);
            std::vector<local_scalar_t__  > acc(3, local_scalar_t__(DUMMY_VAR__));
            stan::math::initialize(acc, DUMMY_VAR__);
            stan::math::fill(acc, DUMMY_VAR__);
            current_statement_begin__ = 63;
            validate_non_negative_index("gam", "3", 3);
            validate_non_negative_index("gam", "T", T);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > gam(T, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(3));
            stan::math::initialize(gam, DUMMY_VAR__);
            stan::math::fill(gam, DUMMY_VAR__);
            current_statement_begin__ = 64;
            validate_non_negative_index("phi", "Tm1", Tm1);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> phi(Tm1);
            stan::math::initialize(phi, DUMMY_VAR__);
            stan::math::fill(phi, DUMMY_VAR__);
            current_statement_begin__ = 65;
            validate_non_negative_index("ps", "3", 3);
            validate_non_negative_index("ps", "Tm1", Tm1);
            validate_non_negative_index("ps", "3", 3);
            std::vector<std::vector<std::vector<local_scalar_t__  >  >  > ps(3, std::vector<std::vector<local_scalar_t__> >(Tm1, std::vector<local_scalar_t__>(3, local_scalar_t__(DUMMY_VAR__))));
            stan::math::initialize(ps, DUMMY_VAR__);
            stan::math::fill(ps, DUMMY_VAR__);
            current_statement_begin__ = 66;
            validate_non_negative_index("po", "3", 3);
            validate_non_negative_index("po", "Jtot", Jtot);
            validate_non_negative_index("po", "3", 3);
            std::vector<std::vector<std::vector<local_scalar_t__  >  >  > po(3, std::vector<std::vector<local_scalar_t__> >(Jtot, std::vector<local_scalar_t__>(3, local_scalar_t__(DUMMY_VAR__))));
            stan::math::initialize(po, DUMMY_VAR__);
            stan::math::fill(po, DUMMY_VAR__);
            current_statement_begin__ = 67;
            local_scalar_t__ p(DUMMY_VAR__);
            (void) p;  // dummy to suppress unused var warning
            stan::math::initialize(p, DUMMY_VAR__);
            stan::math::fill(p, DUMMY_VAR__);
            current_statement_begin__ = 77;
            for (int i = 1; i <= M; ++i) {
                current_statement_begin__ = 79;
                for (int t = 1; t <= Tm1; ++t) {
                    current_statement_begin__ = 80;
                    stan::model::assign(phi, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                inv_logit((multiply(stan::model::rvalue(X_surv, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X_surv"), beta_phi) + (get_base1(eps_phi, t, "eps_phi", 1) * sigma_phi))), 
                                "assigning variable phi");
                    current_statement_begin__ = 81;
                    stan::model::assign(ps, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()))), 
                                0, 
                                "assigning variable ps");
                    current_statement_begin__ = 82;
                    stan::model::assign(ps, 
                                stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), 
                                0, 
                                "assigning variable ps");
                    current_statement_begin__ = 83;
                    stan::model::assign(ps, 
                                stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), 
                                0, 
                                "assigning variable ps");
                    current_statement_begin__ = 84;
                    stan::model::assign(ps, 
                                stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                                get_base1(phi, t, "phi", 1), 
                                "assigning variable ps");
                    current_statement_begin__ = 85;
                    stan::model::assign(ps, 
                                stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()))), 
                                (1 - get_base1(phi, t, "phi", 1)), 
                                "assigning variable ps");
                    current_statement_begin__ = 86;
                    stan::model::assign(ps, 
                                stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                                0, 
                                "assigning variable ps");
                    current_statement_begin__ = 87;
                    stan::model::assign(ps, 
                                stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()))), 
                                1, 
                                "assigning variable ps");
                }
                current_statement_begin__ = 90;
                if (as_bool(get_base1(introduced, i, "introduced", 1))) {
                    current_statement_begin__ = 93;
                    for (int t = 1; t <= (get_base1(t_intro, i, "t_intro", 1) - 2); ++t) {
                        current_statement_begin__ = 94;
                        stan::model::assign(ps, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), 
                                    1, 
                                    "assigning variable ps");
                        current_statement_begin__ = 95;
                        stan::model::assign(ps, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                                    0, 
                                    "assigning variable ps");
                        current_statement_begin__ = 96;
                        stan::model::assign(ps, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()))), 
                                    0, 
                                    "assigning variable ps");
                    }
                    current_statement_begin__ = 100;
                    stan::model::assign(ps, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni((get_base1(t_intro, i, "t_intro", 1) - 1)), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), 
                                0, 
                                "assigning variable ps");
                    current_statement_begin__ = 101;
                    stan::model::assign(ps, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni((get_base1(t_intro, i, "t_intro", 1) - 1)), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                                1, 
                                "assigning variable ps");
                    current_statement_begin__ = 102;
                    stan::model::assign(ps, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni((get_base1(t_intro, i, "t_intro", 1) - 1)), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()))), 
                                0, 
                                "assigning variable ps");
                    current_statement_begin__ = 106;
                    for (int t = get_base1(t_intro, i, "t_intro", 1); t <= Tm1; ++t) {
                        current_statement_begin__ = 107;
                        stan::model::assign(ps, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), 
                                    1, 
                                    "assigning variable ps");
                        current_statement_begin__ = 108;
                        stan::model::assign(ps, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                                    0, 
                                    "assigning variable ps");
                        current_statement_begin__ = 109;
                        stan::model::assign(ps, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()))), 
                                    0, 
                                    "assigning variable ps");
                    }
                } else {
                    current_statement_begin__ = 113;
                    for (int t = 1; t <= Tm1; ++t) {
                        current_statement_begin__ = 114;
                        stan::model::assign(ps, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), 
                                    (1 - get_base1(lambda, t, "lambda", 1)), 
                                    "assigning variable ps");
                        current_statement_begin__ = 115;
                        stan::model::assign(ps, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                                    get_base1(lambda, t, "lambda", 1), 
                                    "assigning variable ps");
                        current_statement_begin__ = 116;
                        stan::model::assign(ps, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()))), 
                                    0, 
                                    "assigning variable ps");
                    }
                }
                current_statement_begin__ = 120;
                if (as_bool(get_base1(removed, i, "removed", 1))) {
                    current_statement_begin__ = 121;
                    if (as_bool(logical_lt(get_base1(t_remove, i, "t_remove", 1), T))) {
                        current_statement_begin__ = 125;
                        stan::model::assign(ps, 
                                    stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(get_base1(t_remove, i, "t_remove", 1)), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                                    0, 
                                    "assigning variable ps");
                        current_statement_begin__ = 126;
                        stan::model::assign(ps, 
                                    stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(get_base1(t_remove, i, "t_remove", 1)), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()))), 
                                    1, 
                                    "assigning variable ps");
                    }
                }
                current_statement_begin__ = 131;
                for (int j = 1; j <= Jtot; ++j) {
                    current_statement_begin__ = 132;
                    stan::math::assign(p, inv_logit(get_base1(logit_detect, j, "logit_detect", 1)));
                    current_statement_begin__ = 133;
                    stan::model::assign(po, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), 
                                1, 
                                "assigning variable po");
                    current_statement_begin__ = 134;
                    stan::model::assign(po, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                                0, 
                                "assigning variable po");
                    current_statement_begin__ = 136;
                    if (as_bool(logical_eq(get_base1(prim_idx, j, "prim_idx", 1), get_base1(t_intro, i, "t_intro", 1)))) {
                        current_statement_begin__ = 140;
                        stan::model::assign(po, 
                                    stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), 
                                    1, 
                                    "assigning variable po");
                        current_statement_begin__ = 141;
                        stan::model::assign(po, 
                                    stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                                    0, 
                                    "assigning variable po");
                    } else {
                        current_statement_begin__ = 143;
                        stan::model::assign(po, 
                                    stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), 
                                    (1 - p), 
                                    "assigning variable po");
                        current_statement_begin__ = 144;
                        stan::model::assign(po, 
                                    stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                                    p, 
                                    "assigning variable po");
                    }
                    current_statement_begin__ = 146;
                    stan::model::assign(po, 
                                stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), 
                                1, 
                                "assigning variable po");
                    current_statement_begin__ = 147;
                    stan::model::assign(po, 
                                stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                                0, 
                                "assigning variable po");
                }
                current_statement_begin__ = 151;
                stan::model::assign(gam, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            1, 
                            "assigning variable gam");
                current_statement_begin__ = 152;
                stan::model::assign(gam, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            0, 
                            "assigning variable gam");
                current_statement_begin__ = 153;
                stan::model::assign(gam, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                            0, 
                            "assigning variable gam");
                current_statement_begin__ = 155;
                for (int t = 2; t <= T; ++t) {
                    current_statement_begin__ = 156;
                    for (int k = 1; k <= 3; ++k) {
                        current_statement_begin__ = 157;
                        for (int kk = 1; kk <= 3; ++kk) {
                            current_statement_begin__ = 158;
                            stan::model::assign(acc, 
                                        stan::model::cons_list(stan::model::index_uni(kk), stan::model::nil_index_list()), 
                                        (get_base1(get_base1(gam, (t - 1), "gam", 1), kk, "gam", 2) * get_base1(get_base1(get_base1(ps, kk, "ps", 1), (t - 1), "ps", 2), k, "ps", 3)), 
                                        "assigning variable acc");
                            current_statement_begin__ = 159;
                            if (as_bool(get_base1(any_surveys, t, "any_surveys", 1))) {
                                current_statement_begin__ = 164;
                                for (int j = 1; j <= get_base1(J, t, "J", 1); ++j) {
                                    current_statement_begin__ = 165;
                                    stan::model::assign(acc, 
                                                stan::model::cons_list(stan::model::index_uni(kk), stan::model::nil_index_list()), 
                                                (get_base1(acc, kk, "acc", 1) * get_base1(get_base1(get_base1(po, k, "po", 1), get_base1(get_base1(j_idx, t, "j_idx", 1), j, "j_idx", 2), "po", 2), get_base1(get_base1(get_base1(Y, i, "Y", 1), t, "Y", 2), j, "Y", 3), "po", 3)), 
                                                "assigning variable acc");
                                }
                            }
                        }
                        current_statement_begin__ = 169;
                        stan::model::assign(gam, 
                                    stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), 
                                    sum(acc), 
                                    "assigning variable gam");
                    }
                }
                current_statement_begin__ = 172;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::log(sum(get_base1(gam, T, "gam", 1))), 
                            "assigning variable log_lik");
            }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 50;
            size_t logit_detect_j_1_max__ = Jtot;
            for (size_t j_1__ = 0; j_1__ < logit_detect_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(logit_detect(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: logit_detect" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable logit_detect: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 51;
            size_t lambda_j_1_max__ = Tm1;
            for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(lambda(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: lambda" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable lambda: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "lambda", lambda, 0);
            check_less_or_equal(function__, "lambda", lambda, 1);
            current_statement_begin__ = 52;
            size_t log_lik_j_1_max__ = M;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(log_lik(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: log_lik" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_lik: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            current_statement_begin__ = 179;
            lp_accum__.add(std_normal_log<propto__>(alpha_lambda));
            current_statement_begin__ = 180;
            lp_accum__.add(std_normal_log<propto__>(sigma_lambda));
            current_statement_begin__ = 181;
            lp_accum__.add(std_normal_log<propto__>(eps_lambda));
            current_statement_begin__ = 182;
            lp_accum__.add(std_normal_log<propto__>(beta_detect));
            current_statement_begin__ = 183;
            lp_accum__.add(std_normal_log<propto__>(beta_phi));
            current_statement_begin__ = 184;
            lp_accum__.add(std_normal_log<propto__>(sigma_phi));
            current_statement_begin__ = 185;
            lp_accum__.add(std_normal_log<propto__>(eps_phi));
            current_statement_begin__ = 187;
            lp_accum__.add(sum(log_lik));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("alpha_lambda");
        names__.push_back("sigma_lambda");
        names__.push_back("eps_lambda");
        names__.push_back("beta_phi");
        names__.push_back("sigma_phi");
        names__.push_back("eps_phi");
        names__.push_back("beta_detect");
        names__.push_back("logit_detect");
        names__.push_back("lambda");
        names__.push_back("log_lik");
        names__.push_back("s");
        names__.push_back("Nsuper");
        names__.push_back("N");
        names__.push_back("B");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((T - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(m_surv);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(m_detect);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Jtot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Tm1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Tm1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Tm1);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_twostate_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double alpha_lambda = in__.scalar_constrain();
        vars__.push_back(alpha_lambda);
        double sigma_lambda = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_lambda);
        Eigen::Matrix<double, Eigen::Dynamic, 1> eps_lambda = in__.vector_constrain((T - 1));
        size_t eps_lambda_j_1_max__ = (T - 1);
        for (size_t j_1__ = 0; j_1__ < eps_lambda_j_1_max__; ++j_1__) {
            vars__.push_back(eps_lambda(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_phi = in__.vector_constrain(m_surv);
        size_t beta_phi_j_1_max__ = m_surv;
        for (size_t j_1__ = 0; j_1__ < beta_phi_j_1_max__; ++j_1__) {
            vars__.push_back(beta_phi(j_1__));
        }
        double sigma_phi = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_phi);
        Eigen::Matrix<double, Eigen::Dynamic, 1> eps_phi = in__.vector_constrain(T);
        size_t eps_phi_j_1_max__ = T;
        for (size_t j_1__ = 0; j_1__ < eps_phi_j_1_max__; ++j_1__) {
            vars__.push_back(eps_phi(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_detect = in__.vector_constrain(m_detect);
        size_t beta_detect_j_1_max__ = m_detect;
        for (size_t j_1__ = 0; j_1__ < beta_detect_j_1_max__; ++j_1__) {
            vars__.push_back(beta_detect(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 50;
            validate_non_negative_index("logit_detect", "Jtot", Jtot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> logit_detect(Jtot);
            stan::math::initialize(logit_detect, DUMMY_VAR__);
            stan::math::fill(logit_detect, DUMMY_VAR__);
            current_statement_begin__ = 51;
            validate_non_negative_index("lambda", "Tm1", Tm1);
            Eigen::Matrix<double, Eigen::Dynamic, 1> lambda(Tm1);
            stan::math::initialize(lambda, DUMMY_VAR__);
            stan::math::fill(lambda, DUMMY_VAR__);
            current_statement_begin__ = 52;
            validate_non_negative_index("log_lik", "M", M);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik(M);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 55;
            stan::math::assign(lambda, multiply(any_recruitment, inv_logit(add(alpha_lambda, multiply(eps_lambda, sigma_lambda)))));
            current_statement_begin__ = 58;
            stan::math::assign(logit_detect, multiply(X_detect, beta_detect));
            {
            current_statement_begin__ = 62;
            validate_non_negative_index("acc", "3", 3);
            std::vector<local_scalar_t__  > acc(3, local_scalar_t__(DUMMY_VAR__));
            stan::math::initialize(acc, DUMMY_VAR__);
            stan::math::fill(acc, DUMMY_VAR__);
            current_statement_begin__ = 63;
            validate_non_negative_index("gam", "3", 3);
            validate_non_negative_index("gam", "T", T);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > gam(T, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(3));
            stan::math::initialize(gam, DUMMY_VAR__);
            stan::math::fill(gam, DUMMY_VAR__);
            current_statement_begin__ = 64;
            validate_non_negative_index("phi", "Tm1", Tm1);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> phi(Tm1);
            stan::math::initialize(phi, DUMMY_VAR__);
            stan::math::fill(phi, DUMMY_VAR__);
            current_statement_begin__ = 65;
            validate_non_negative_index("ps", "3", 3);
            validate_non_negative_index("ps", "Tm1", Tm1);
            validate_non_negative_index("ps", "3", 3);
            std::vector<std::vector<std::vector<local_scalar_t__  >  >  > ps(3, std::vector<std::vector<local_scalar_t__> >(Tm1, std::vector<local_scalar_t__>(3, local_scalar_t__(DUMMY_VAR__))));
            stan::math::initialize(ps, DUMMY_VAR__);
            stan::math::fill(ps, DUMMY_VAR__);
            current_statement_begin__ = 66;
            validate_non_negative_index("po", "3", 3);
            validate_non_negative_index("po", "Jtot", Jtot);
            validate_non_negative_index("po", "3", 3);
            std::vector<std::vector<std::vector<local_scalar_t__  >  >  > po(3, std::vector<std::vector<local_scalar_t__> >(Jtot, std::vector<local_scalar_t__>(3, local_scalar_t__(DUMMY_VAR__))));
            stan::math::initialize(po, DUMMY_VAR__);
            stan::math::fill(po, DUMMY_VAR__);
            current_statement_begin__ = 67;
            local_scalar_t__ p(DUMMY_VAR__);
            (void) p;  // dummy to suppress unused var warning
            stan::math::initialize(p, DUMMY_VAR__);
            stan::math::fill(p, DUMMY_VAR__);
            current_statement_begin__ = 77;
            for (int i = 1; i <= M; ++i) {
                current_statement_begin__ = 79;
                for (int t = 1; t <= Tm1; ++t) {
                    current_statement_begin__ = 80;
                    stan::model::assign(phi, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                inv_logit((multiply(stan::model::rvalue(X_surv, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X_surv"), beta_phi) + (get_base1(eps_phi, t, "eps_phi", 1) * sigma_phi))), 
                                "assigning variable phi");
                    current_statement_begin__ = 81;
                    stan::model::assign(ps, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()))), 
                                0, 
                                "assigning variable ps");
                    current_statement_begin__ = 82;
                    stan::model::assign(ps, 
                                stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), 
                                0, 
                                "assigning variable ps");
                    current_statement_begin__ = 83;
                    stan::model::assign(ps, 
                                stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), 
                                0, 
                                "assigning variable ps");
                    current_statement_begin__ = 84;
                    stan::model::assign(ps, 
                                stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                                get_base1(phi, t, "phi", 1), 
                                "assigning variable ps");
                    current_statement_begin__ = 85;
                    stan::model::assign(ps, 
                                stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()))), 
                                (1 - get_base1(phi, t, "phi", 1)), 
                                "assigning variable ps");
                    current_statement_begin__ = 86;
                    stan::model::assign(ps, 
                                stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                                0, 
                                "assigning variable ps");
                    current_statement_begin__ = 87;
                    stan::model::assign(ps, 
                                stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()))), 
                                1, 
                                "assigning variable ps");
                }
                current_statement_begin__ = 90;
                if (as_bool(get_base1(introduced, i, "introduced", 1))) {
                    current_statement_begin__ = 93;
                    for (int t = 1; t <= (get_base1(t_intro, i, "t_intro", 1) - 2); ++t) {
                        current_statement_begin__ = 94;
                        stan::model::assign(ps, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), 
                                    1, 
                                    "assigning variable ps");
                        current_statement_begin__ = 95;
                        stan::model::assign(ps, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                                    0, 
                                    "assigning variable ps");
                        current_statement_begin__ = 96;
                        stan::model::assign(ps, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()))), 
                                    0, 
                                    "assigning variable ps");
                    }
                    current_statement_begin__ = 100;
                    stan::model::assign(ps, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni((get_base1(t_intro, i, "t_intro", 1) - 1)), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), 
                                0, 
                                "assigning variable ps");
                    current_statement_begin__ = 101;
                    stan::model::assign(ps, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni((get_base1(t_intro, i, "t_intro", 1) - 1)), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                                1, 
                                "assigning variable ps");
                    current_statement_begin__ = 102;
                    stan::model::assign(ps, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni((get_base1(t_intro, i, "t_intro", 1) - 1)), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()))), 
                                0, 
                                "assigning variable ps");
                    current_statement_begin__ = 106;
                    for (int t = get_base1(t_intro, i, "t_intro", 1); t <= Tm1; ++t) {
                        current_statement_begin__ = 107;
                        stan::model::assign(ps, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), 
                                    1, 
                                    "assigning variable ps");
                        current_statement_begin__ = 108;
                        stan::model::assign(ps, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                                    0, 
                                    "assigning variable ps");
                        current_statement_begin__ = 109;
                        stan::model::assign(ps, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()))), 
                                    0, 
                                    "assigning variable ps");
                    }
                } else {
                    current_statement_begin__ = 113;
                    for (int t = 1; t <= Tm1; ++t) {
                        current_statement_begin__ = 114;
                        stan::model::assign(ps, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), 
                                    (1 - get_base1(lambda, t, "lambda", 1)), 
                                    "assigning variable ps");
                        current_statement_begin__ = 115;
                        stan::model::assign(ps, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                                    get_base1(lambda, t, "lambda", 1), 
                                    "assigning variable ps");
                        current_statement_begin__ = 116;
                        stan::model::assign(ps, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()))), 
                                    0, 
                                    "assigning variable ps");
                    }
                }
                current_statement_begin__ = 120;
                if (as_bool(get_base1(removed, i, "removed", 1))) {
                    current_statement_begin__ = 121;
                    if (as_bool(logical_lt(get_base1(t_remove, i, "t_remove", 1), T))) {
                        current_statement_begin__ = 125;
                        stan::model::assign(ps, 
                                    stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(get_base1(t_remove, i, "t_remove", 1)), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                                    0, 
                                    "assigning variable ps");
                        current_statement_begin__ = 126;
                        stan::model::assign(ps, 
                                    stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(get_base1(t_remove, i, "t_remove", 1)), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()))), 
                                    1, 
                                    "assigning variable ps");
                    }
                }
                current_statement_begin__ = 131;
                for (int j = 1; j <= Jtot; ++j) {
                    current_statement_begin__ = 132;
                    stan::math::assign(p, inv_logit(get_base1(logit_detect, j, "logit_detect", 1)));
                    current_statement_begin__ = 133;
                    stan::model::assign(po, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), 
                                1, 
                                "assigning variable po");
                    current_statement_begin__ = 134;
                    stan::model::assign(po, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                                0, 
                                "assigning variable po");
                    current_statement_begin__ = 136;
                    if (as_bool(logical_eq(get_base1(prim_idx, j, "prim_idx", 1), get_base1(t_intro, i, "t_intro", 1)))) {
                        current_statement_begin__ = 140;
                        stan::model::assign(po, 
                                    stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), 
                                    1, 
                                    "assigning variable po");
                        current_statement_begin__ = 141;
                        stan::model::assign(po, 
                                    stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                                    0, 
                                    "assigning variable po");
                    } else {
                        current_statement_begin__ = 143;
                        stan::model::assign(po, 
                                    stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), 
                                    (1 - p), 
                                    "assigning variable po");
                        current_statement_begin__ = 144;
                        stan::model::assign(po, 
                                    stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                                    p, 
                                    "assigning variable po");
                    }
                    current_statement_begin__ = 146;
                    stan::model::assign(po, 
                                stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), 
                                1, 
                                "assigning variable po");
                    current_statement_begin__ = 147;
                    stan::model::assign(po, 
                                stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                                0, 
                                "assigning variable po");
                }
                current_statement_begin__ = 151;
                stan::model::assign(gam, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            1, 
                            "assigning variable gam");
                current_statement_begin__ = 152;
                stan::model::assign(gam, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            0, 
                            "assigning variable gam");
                current_statement_begin__ = 153;
                stan::model::assign(gam, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                            0, 
                            "assigning variable gam");
                current_statement_begin__ = 155;
                for (int t = 2; t <= T; ++t) {
                    current_statement_begin__ = 156;
                    for (int k = 1; k <= 3; ++k) {
                        current_statement_begin__ = 157;
                        for (int kk = 1; kk <= 3; ++kk) {
                            current_statement_begin__ = 158;
                            stan::model::assign(acc, 
                                        stan::model::cons_list(stan::model::index_uni(kk), stan::model::nil_index_list()), 
                                        (get_base1(get_base1(gam, (t - 1), "gam", 1), kk, "gam", 2) * get_base1(get_base1(get_base1(ps, kk, "ps", 1), (t - 1), "ps", 2), k, "ps", 3)), 
                                        "assigning variable acc");
                            current_statement_begin__ = 159;
                            if (as_bool(get_base1(any_surveys, t, "any_surveys", 1))) {
                                current_statement_begin__ = 164;
                                for (int j = 1; j <= get_base1(J, t, "J", 1); ++j) {
                                    current_statement_begin__ = 165;
                                    stan::model::assign(acc, 
                                                stan::model::cons_list(stan::model::index_uni(kk), stan::model::nil_index_list()), 
                                                (get_base1(acc, kk, "acc", 1) * get_base1(get_base1(get_base1(po, k, "po", 1), get_base1(get_base1(j_idx, t, "j_idx", 1), j, "j_idx", 2), "po", 2), get_base1(get_base1(get_base1(Y, i, "Y", 1), t, "Y", 2), j, "Y", 3), "po", 3)), 
                                                "assigning variable acc");
                                }
                            }
                        }
                        current_statement_begin__ = 169;
                        stan::model::assign(gam, 
                                    stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), 
                                    sum(acc), 
                                    "assigning variable gam");
                    }
                }
                current_statement_begin__ = 172;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::log(sum(get_base1(gam, T, "gam", 1))), 
                            "assigning variable log_lik");
            }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 51;
            check_greater_or_equal(function__, "lambda", lambda, 0);
            check_less_or_equal(function__, "lambda", lambda, 1);
            // write transformed parameters
            if (include_tparams__) {
                size_t logit_detect_j_1_max__ = Jtot;
                for (size_t j_1__ = 0; j_1__ < logit_detect_j_1_max__; ++j_1__) {
                    vars__.push_back(logit_detect(j_1__));
                }
                size_t lambda_j_1_max__ = Tm1;
                for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
                    vars__.push_back(lambda(j_1__));
                }
                size_t log_lik_j_1_max__ = M;
                for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                    vars__.push_back(log_lik(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 191;
            validate_non_negative_index("s", "M", M);
            validate_non_negative_index("s", "T", T);
            std::vector<std::vector<int> > s(M, std::vector<int>(T, int(0)));
            stan::math::fill(s, std::numeric_limits<int>::min());
            current_statement_begin__ = 192;
            int Nsuper;
            (void) Nsuper;  // dummy to suppress unused var warning
            stan::math::fill(Nsuper, std::numeric_limits<int>::min());
            current_statement_begin__ = 193;
            validate_non_negative_index("N", "Tm1", Tm1);
            std::vector<int> N(Tm1, int(0));
            stan::math::fill(N, std::numeric_limits<int>::min());
            current_statement_begin__ = 194;
            validate_non_negative_index("B", "Tm1", Tm1);
            std::vector<int> B(Tm1, int(0));
            stan::math::fill(B, std::numeric_limits<int>::min());
            // generated quantities statements
            {
            current_statement_begin__ = 197;
            validate_non_negative_index("ps", "3", 3);
            validate_non_negative_index("ps", "Tm1", Tm1);
            validate_non_negative_index("ps", "3", 3);
            std::vector<std::vector<std::vector<local_scalar_t__  >  >  > ps(3, std::vector<std::vector<local_scalar_t__> >(Tm1, std::vector<local_scalar_t__>(3, local_scalar_t__(DUMMY_VAR__))));
            stan::math::initialize(ps, DUMMY_VAR__);
            stan::math::fill(ps, DUMMY_VAR__);
            current_statement_begin__ = 198;
            validate_non_negative_index("phi", "Tm1", Tm1);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> phi(Tm1);
            stan::math::initialize(phi, DUMMY_VAR__);
            stan::math::fill(phi, DUMMY_VAR__);
            current_statement_begin__ = 208;
            for (int i = 1; i <= M; ++i) {
                current_statement_begin__ = 209;
                for (int t = 1; t <= Tm1; ++t) {
                    current_statement_begin__ = 210;
                    stan::model::assign(phi, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                inv_logit((multiply(stan::model::rvalue(X_surv, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X_surv"), beta_phi) + (get_base1(eps_phi, t, "eps_phi", 1) * sigma_phi))), 
                                "assigning variable phi");
                    current_statement_begin__ = 211;
                    stan::model::assign(ps, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()))), 
                                0, 
                                "assigning variable ps");
                    current_statement_begin__ = 212;
                    stan::model::assign(ps, 
                                stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), 
                                0, 
                                "assigning variable ps");
                    current_statement_begin__ = 213;
                    stan::model::assign(ps, 
                                stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), 
                                0, 
                                "assigning variable ps");
                    current_statement_begin__ = 214;
                    stan::model::assign(ps, 
                                stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                                get_base1(phi, t, "phi", 1), 
                                "assigning variable ps");
                    current_statement_begin__ = 215;
                    stan::model::assign(ps, 
                                stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()))), 
                                (1 - get_base1(phi, t, "phi", 1)), 
                                "assigning variable ps");
                    current_statement_begin__ = 216;
                    stan::model::assign(ps, 
                                stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                                0, 
                                "assigning variable ps");
                    current_statement_begin__ = 217;
                    stan::model::assign(ps, 
                                stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()))), 
                                1, 
                                "assigning variable ps");
                }
                current_statement_begin__ = 220;
                if (as_bool(get_base1(introduced, i, "introduced", 1))) {
                    current_statement_begin__ = 223;
                    for (int t = 1; t <= (get_base1(t_intro, i, "t_intro", 1) - 2); ++t) {
                        current_statement_begin__ = 224;
                        stan::model::assign(ps, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), 
                                    1, 
                                    "assigning variable ps");
                        current_statement_begin__ = 225;
                        stan::model::assign(ps, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                                    0, 
                                    "assigning variable ps");
                        current_statement_begin__ = 226;
                        stan::model::assign(ps, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()))), 
                                    0, 
                                    "assigning variable ps");
                    }
                    current_statement_begin__ = 230;
                    stan::model::assign(ps, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni((get_base1(t_intro, i, "t_intro", 1) - 1)), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), 
                                0, 
                                "assigning variable ps");
                    current_statement_begin__ = 231;
                    stan::model::assign(ps, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni((get_base1(t_intro, i, "t_intro", 1) - 1)), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                                1, 
                                "assigning variable ps");
                    current_statement_begin__ = 232;
                    stan::model::assign(ps, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni((get_base1(t_intro, i, "t_intro", 1) - 1)), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()))), 
                                0, 
                                "assigning variable ps");
                    current_statement_begin__ = 236;
                    for (int t = get_base1(t_intro, i, "t_intro", 1); t <= Tm1; ++t) {
                        current_statement_begin__ = 237;
                        stan::model::assign(ps, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), 
                                    (1 - get_base1(lambda, t, "lambda", 1)), 
                                    "assigning variable ps");
                        current_statement_begin__ = 238;
                        stan::model::assign(ps, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                                    get_base1(lambda, t, "lambda", 1), 
                                    "assigning variable ps");
                        current_statement_begin__ = 239;
                        stan::model::assign(ps, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()))), 
                                    0, 
                                    "assigning variable ps");
                    }
                } else {
                    current_statement_begin__ = 243;
                    for (int t = 1; t <= Tm1; ++t) {
                        current_statement_begin__ = 244;
                        stan::model::assign(ps, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), 
                                    (1 - get_base1(lambda, t, "lambda", 1)), 
                                    "assigning variable ps");
                        current_statement_begin__ = 245;
                        stan::model::assign(ps, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                                    get_base1(lambda, t, "lambda", 1), 
                                    "assigning variable ps");
                        current_statement_begin__ = 246;
                        stan::model::assign(ps, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()))), 
                                    0, 
                                    "assigning variable ps");
                    }
                }
                current_statement_begin__ = 250;
                if (as_bool(get_base1(removed, i, "removed", 1))) {
                    current_statement_begin__ = 251;
                    if (as_bool(logical_lt(get_base1(t_remove, i, "t_remove", 1), T))) {
                        current_statement_begin__ = 255;
                        stan::model::assign(ps, 
                                    stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(get_base1(t_remove, i, "t_remove", 1)), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                                    0, 
                                    "assigning variable ps");
                        current_statement_begin__ = 256;
                        stan::model::assign(ps, 
                                    stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(get_base1(t_remove, i, "t_remove", 1)), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()))), 
                                    1, 
                                    "assigning variable ps");
                    }
                }
                current_statement_begin__ = 261;
                stan::model::assign(s, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            1, 
                            "assigning variable s");
                current_statement_begin__ = 262;
                for (int t = 2; t <= T; ++t) {
                    current_statement_begin__ = 263;
                    stan::model::assign(s, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), 
                                categorical_rng(to_vector(stan::model::rvalue(ps, stan::model::cons_list(stan::model::index_uni(get_base1(get_base1(s, i, "s", 1), (t - 1), "s", 2)), stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), "ps")), base_rng__), 
                                "assigning variable s");
                }
            }
            }
            {
            current_statement_begin__ = 270;
            validate_non_negative_index("al", "M", M);
            validate_non_negative_index("al", "Tm1", Tm1);
            std::vector<std::vector<int  >  > al(M, std::vector<int>(Tm1, int(0)));
            stan::math::fill(al, std::numeric_limits<int>::min());
            current_statement_begin__ = 271;
            validate_non_negative_index("d", "M", M);
            validate_non_negative_index("d", "Tm1", Tm1);
            std::vector<std::vector<int  >  > d(M, std::vector<int>(Tm1, int(0)));
            stan::math::fill(d, std::numeric_limits<int>::min());
            current_statement_begin__ = 272;
            validate_non_negative_index("alive", "M", M);
            std::vector<int  > alive(M, int(0));
            stan::math::fill(alive, std::numeric_limits<int>::min());
            current_statement_begin__ = 273;
            validate_non_negative_index("w", "M", M);
            std::vector<int  > w(M, int(0));
            stan::math::fill(w, std::numeric_limits<int>::min());
            current_statement_begin__ = 275;
            for (int i = 1; i <= M; ++i) {
                current_statement_begin__ = 276;
                for (int t = 2; t <= T; ++t) {
                    current_statement_begin__ = 277;
                    stan::model::assign(al, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::nil_index_list())), 
                                logical_eq(get_base1(get_base1(s, i, "s", 1), t, "s", 2), 2), 
                                "assigning variable al");
                }
                current_statement_begin__ = 279;
                for (int t = 1; t <= Tm1; ++t) {
                    current_statement_begin__ = 280;
                    stan::model::assign(d, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), 
                                logical_eq(get_base1(get_base1(s, i, "s", 1), t, "s", 2), get_base1(get_base1(al, i, "al", 1), t, "al", 2)), 
                                "assigning variable d");
                }
                current_statement_begin__ = 281;
                stan::model::assign(alive, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            sum(get_base1(al, i, "al", 1)), 
                            "assigning variable alive");
            }
            current_statement_begin__ = 284;
            for (int t = 1; t <= Tm1; ++t) {
                current_statement_begin__ = 285;
                stan::model::assign(N, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            sum(stan::model::rvalue(al, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "al")), 
                            "assigning variable N");
                current_statement_begin__ = 286;
                stan::model::assign(B, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            sum(stan::model::rvalue(d, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "d")), 
                            "assigning variable B");
            }
            current_statement_begin__ = 288;
            for (int i = 1; i <= M; ++i) {
                current_statement_begin__ = 289;
                stan::model::assign(w, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (1 - logical_negation(get_base1(alive, i, "alive", 1))), 
                            "assigning variable w");
            }
            current_statement_begin__ = 290;
            stan::math::assign(Nsuper, sum(w));
            }
            // validate, write generated quantities
            current_statement_begin__ = 191;
            size_t s_i_0_max__ = M;
            size_t s_i_1_max__ = T;
            for (size_t i_0__ = 0; i_0__ < s_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < s_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "s[i_0__][i_1__]", s[i_0__][i_1__], 1);
                    check_less_or_equal(function__, "s[i_0__][i_1__]", s[i_0__][i_1__], 3);
                }
            }
            size_t s_k_0_max__ = M;
            size_t s_k_1_max__ = T;
            for (size_t k_1__ = 0; k_1__ < s_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < s_k_0_max__; ++k_0__) {
                    vars__.push_back(s[k_0__][k_1__]);
                }
            }
            current_statement_begin__ = 192;
            check_greater_or_equal(function__, "Nsuper", Nsuper, 0);
            vars__.push_back(Nsuper);
            current_statement_begin__ = 193;
            size_t N_i_0_max__ = Tm1;
            for (size_t i_0__ = 0; i_0__ < N_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "N[i_0__]", N[i_0__], 0);
            }
            size_t N_k_0_max__ = Tm1;
            for (size_t k_0__ = 0; k_0__ < N_k_0_max__; ++k_0__) {
                vars__.push_back(N[k_0__]);
            }
            current_statement_begin__ = 194;
            size_t B_i_0_max__ = Tm1;
            for (size_t i_0__ = 0; i_0__ < B_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "B[i_0__]", B[i_0__], 0);
            }
            size_t B_k_0_max__ = Tm1;
            for (size_t k_0__ = 0; k_0__ < B_k_0_max__; ++k_0__) {
                vars__.push_back(B[k_0__]);
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_twostate";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha_lambda";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_lambda";
        param_names__.push_back(param_name_stream__.str());
        size_t eps_lambda_j_1_max__ = (T - 1);
        for (size_t j_1__ = 0; j_1__ < eps_lambda_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eps_lambda" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_phi_j_1_max__ = m_surv;
        for (size_t j_1__ = 0; j_1__ < beta_phi_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_phi" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_phi";
        param_names__.push_back(param_name_stream__.str());
        size_t eps_phi_j_1_max__ = T;
        for (size_t j_1__ = 0; j_1__ < eps_phi_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eps_phi" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_detect_j_1_max__ = m_detect;
        for (size_t j_1__ = 0; j_1__ < beta_detect_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_detect" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t logit_detect_j_1_max__ = Jtot;
            for (size_t j_1__ = 0; j_1__ < logit_detect_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "logit_detect" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lambda_j_1_max__ = Tm1;
            for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_lik_j_1_max__ = M;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t s_k_0_max__ = M;
        size_t s_k_1_max__ = T;
        for (size_t k_1__ = 0; k_1__ < s_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < s_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "s" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "Nsuper";
        param_names__.push_back(param_name_stream__.str());
        size_t N_k_0_max__ = Tm1;
        for (size_t k_0__ = 0; k_0__ < N_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "N" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t B_k_0_max__ = Tm1;
        for (size_t k_0__ = 0; k_0__ < B_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "B" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha_lambda";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_lambda";
        param_names__.push_back(param_name_stream__.str());
        size_t eps_lambda_j_1_max__ = (T - 1);
        for (size_t j_1__ = 0; j_1__ < eps_lambda_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eps_lambda" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_phi_j_1_max__ = m_surv;
        for (size_t j_1__ = 0; j_1__ < beta_phi_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_phi" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_phi";
        param_names__.push_back(param_name_stream__.str());
        size_t eps_phi_j_1_max__ = T;
        for (size_t j_1__ = 0; j_1__ < eps_phi_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eps_phi" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_detect_j_1_max__ = m_detect;
        for (size_t j_1__ = 0; j_1__ < beta_detect_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_detect" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t logit_detect_j_1_max__ = Jtot;
            for (size_t j_1__ = 0; j_1__ < logit_detect_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "logit_detect" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lambda_j_1_max__ = Tm1;
            for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_lik_j_1_max__ = M;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t s_k_0_max__ = M;
        size_t s_k_1_max__ = T;
        for (size_t k_1__ = 0; k_1__ < s_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < s_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "s" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "Nsuper";
        param_names__.push_back(param_name_stream__.str());
        size_t N_k_0_max__ = Tm1;
        for (size_t k_0__ = 0; k_0__ < N_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "N" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t B_k_0_max__ = Tm1;
        for (size_t k_0__ = 0; k_0__ < B_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "B" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_twostate_namespace::model_twostate stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
